/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.main.info;

/**
 *
 * @author yuvraj
 */
public class Module4 extends javax.swing.JFrame {

    /**
     * Creates new form Module1
     */
    public Module4() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Help - Detecting And Resolving Firewall Policy Anomalies");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Conclusion");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Conclusion\n\nResolution of anomalies from firewall policy rules is vital to the network’s security\nas anomalies can introduce unwarranted and hard to find security holes. Our\nwork presents an automated process for detecting and resolving such anomalies.\nThe anomaly resolution algorithm and the merging algorithm should produce\na compact yet anomaly free rule set that would be easier to understand andDetection \nand Resolution of Anomalies in Firewall Policy Rules 29\nmaintain. This algorithms can also be integrated into policy advisor and editing\ntools. The paper also establishes the complete definition and analysis of the\nrelations between rules.\nIn future, this analysis can be extended to distributed firewalls. Also, we\npropose to use data mining techniques to analyze the log files of the firewall \nand\ndiscover other kinds of anomalies. These techniques should be applied only after\nthe rules have been made free from anomaly by applying the algorithms in this\npaper. That way it would be ensured that not only syntactic but also semantic\nmistakes in the rules will be captured. Research in this direction has already\nstarted.\n\nResolution of anomalies from firewall policy rules is vital to the network’s \nsecurity\nas anomalies can introduce unwarranted and hard to find security holes. Our\nwork presents an automated process for detecting and resolving such anomalies.\nThe anomaly resolution algorithm and the merging algorithm should produce\na compact yet anomaly free rule set that would be easier to understand andDetection \nand Resolution of Anomalies in Firewall Policy Rules 29\nmaintain. This algorithms can also be integrated into policy advisor and editing\ntools. The paper also establishes the complete definition and analysis of the\nrelations between rules.\nIn future, this analysis can be extended to distributed firewalls. Also, we\npropose to use data mining techniques to analyze the log files of the firewall \nand\ndiscover other kinds of anomalies. These techniques should be applied only after\nthe rules have been made free from anomaly by applying the algorithms in this\npaper. That way it would be ensured that not only syntactic but also semantic\nmistakes in the rules will be captured. Research in this direction has already\nstarted.\n\nResolution of anomalies from firewall policy rules is vital to the network’s \nsecurity\nas anomalies can introduce unwarranted and hard to find security holes. Our\nwork presents an automated process for detecting and resolving such anomalies.\nThe anomaly resolution algorithm and the merging algorithm should produce\na compact yet anomaly free rule set that would be easier to understand and\nDetection and Resolution of Anomalies in Firewall Policy Rules 29\nmaintain. This algorithms can also be integrated into policy advisor and editing\ntools. The paper also establishes the complete definition and analysis of the\nrelations between rules.\nIn future, this analysis can be extended to distributed firewalls. Also, we\npropose to use data mining techniques to analyze the log files of the firewall and\ndiscover other kinds of anomalies. These techniques should be applied only after\nthe rules have been made free from anomaly by applying the algorithms in this\npaper. That way it would be ensured that not only syntactic but also semantic\nmistakes in the rules will be captured. Research in this direction has already\nstarted.\n\n\nResolution of anomalies from firewall policy rules is vital to the network’s security\nas anomalies can introduce unwarranted and hard to find security holes. Our\nwork presents an automated process for detecting and resolving such anomalies.\nThe anomaly resolution algorithm and the merging algorithm should produce\na compact yet anomaly free rule set that would be easier to understand andDetection \nand Resolution of Anomalies in Firewall Policy Rules 29\nmaintain. This algorithms can also be integrated into policy advisor and editing\ntools. The paper also establishes the complete definition and analysis of the\nrelations between rules.\nIn future, this analysis can be extended to distributed firewalls. Also, we\npropose to use data mining techniques to analyze the log files of the firewall and\ndiscover other kinds of anomalies. These techniques should be applied only after\nthe rules have been made free from anomaly by applying the algorithms in this\npaper. That way it would be ensured that not only syntactic but also semantic\nmistakes in the rules will be captured. Research in this direction has already\nstarted.");
        jScrollPane1.setViewportView(jTextArea1);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jButton1.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 51, 153));
        jButton1.setText("CLOSE");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Module4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Module4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Module4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Module4.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Module4().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
